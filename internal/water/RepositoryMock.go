// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package water

import (
	"sync"
)

var (
	lockRepositoryMockExecute sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             ExecuteFunc: func(zone string, seconds uint8) error {
// 	               panic("mock out the Execute method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(zone string, seconds uint8) error

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Zone is the zone argument value.
			Zone string
			// Seconds is the seconds argument value.
			Seconds uint8
		}
	}
}

// Execute calls ExecuteFunc.
func (mock *RepositoryMock) Execute(zone string, seconds uint8) error {
	if mock.ExecuteFunc == nil {
		panic("RepositoryMock.ExecuteFunc: method is nil but Repository.Execute was just called")
	}
	callInfo := struct {
		Zone    string
		Seconds uint8
	}{
		Zone:    zone,
		Seconds: seconds,
	}
	lockRepositoryMockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	lockRepositoryMockExecute.Unlock()
	return mock.ExecuteFunc(zone, seconds)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedRepository.ExecuteCalls())
func (mock *RepositoryMock) ExecuteCalls() []struct {
	Zone    string
	Seconds uint8
} {
	var calls []struct {
		Zone    string
		Seconds uint8
	}
	lockRepositoryMockExecute.RLock()
	calls = mock.calls.Execute
	lockRepositoryMockExecute.RUnlock()
	return calls
}
