// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockLoggerMockFatal  sync.RWMutex
	lockLoggerMockFatalf sync.RWMutex
)

// Ensure, that LoggerMock does implement Logger.
// If this is not the case, regenerate this file with moq.
var _ Logger = &LoggerMock{}

// LoggerMock is a mock implementation of Logger.
//
//     func TestSomethingThatUsesLogger(t *testing.T) {
//
//         // make and configure a mocked Logger
//         mockedLogger := &LoggerMock{
//             FatalFunc: func(v ...interface{})  {
// 	               panic("mock out the Fatal method")
//             },
//             FatalfFunc: func(format string, v ...interface{})  {
// 	               panic("mock out the Fatalf method")
//             },
//         }
//
//         // use mockedLogger in code that requires Logger
//         // and then make assertions.
//
//     }
type LoggerMock struct {
	// FatalFunc mocks the Fatal method.
	FatalFunc func(v ...interface{})

	// FatalfFunc mocks the Fatalf method.
	FatalfFunc func(format string, v ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Fatal holds details about calls to the Fatal method.
		Fatal []struct {
			// V is the v argument value.
			V []interface{}
		}
		// Fatalf holds details about calls to the Fatalf method.
		Fatalf []struct {
			// Format is the format argument value.
			Format string
			// V is the v argument value.
			V []interface{}
		}
	}
}

// Fatal calls FatalFunc.
func (mock *LoggerMock) Fatal(v ...interface{}) {
	if mock.FatalFunc == nil {
		panic("LoggerMock.FatalFunc: method is nil but Logger.Fatal was just called")
	}
	callInfo := struct {
		V []interface{}
	}{
		V: v,
	}
	lockLoggerMockFatal.Lock()
	mock.calls.Fatal = append(mock.calls.Fatal, callInfo)
	lockLoggerMockFatal.Unlock()
	mock.FatalFunc(v...)
}

// FatalCalls gets all the calls that were made to Fatal.
// Check the length with:
//     len(mockedLogger.FatalCalls())
func (mock *LoggerMock) FatalCalls() []struct {
	V []interface{}
} {
	var calls []struct {
		V []interface{}
	}
	lockLoggerMockFatal.RLock()
	calls = mock.calls.Fatal
	lockLoggerMockFatal.RUnlock()
	return calls
}

// Fatalf calls FatalfFunc.
func (mock *LoggerMock) Fatalf(format string, v ...interface{}) {
	if mock.FatalfFunc == nil {
		panic("LoggerMock.FatalfFunc: method is nil but Logger.Fatalf was just called")
	}
	callInfo := struct {
		Format string
		V      []interface{}
	}{
		Format: format,
		V:      v,
	}
	lockLoggerMockFatalf.Lock()
	mock.calls.Fatalf = append(mock.calls.Fatalf, callInfo)
	lockLoggerMockFatalf.Unlock()
	mock.FatalfFunc(format, v...)
}

// FatalfCalls gets all the calls that were made to Fatalf.
// Check the length with:
//     len(mockedLogger.FatalfCalls())
func (mock *LoggerMock) FatalfCalls() []struct {
	Format string
	V      []interface{}
} {
	var calls []struct {
		Format string
		V      []interface{}
	}
	lockLoggerMockFatalf.RLock()
	calls = mock.calls.Fatalf
	lockLoggerMockFatalf.RUnlock()
	return calls
}
